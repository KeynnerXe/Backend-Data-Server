generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")   // conexión directa (local o cloud)
}

// ==========================
// Models
// ==========================

model User {
  id        Int                @id @default(autoincrement())
  email     String             @unique
  password  String
  role      String             @default("USER") // USER, APPROVER, ADMIN
  createdAt DateTime           @default(now())
  tasks     Task[]
  changes   DashboardChange[]  @relation("UserChanges") // propuestas creadas
  reviews   DashboardChange[]  @relation("UserReviews") // cambios revisados
}

model Task {
  id        Int      @id @default(autoincrement())
  title     String
  done      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relación con User
  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model DashboardData {
  id        Int                @id @default(autoincrement())
  title     String
  value     String
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  changes   DashboardChange[]
}

model DashboardChange {
  id          Int      @id @default(autoincrement())
  dashboardId Int
  newValue    String
  status      String   @default("pending") // pending, approved, rejected
  createdBy   Int?     // opcional: API-key writes (sin user)
  reviewedBy  Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  dashboard   DashboardData @relation(fields: [dashboardId], references: [id])
  creator     User?         @relation("UserChanges", fields: [createdBy], references: [id])
  reviewer    User?         @relation("UserReviews", fields: [reviewedBy], references: [id])
}
